- name: Config new machine
  hosts: otusproj
  vars:
    user: artys
    date: '2024-02-28' ### change this to right date of backup
  gather_facts: false
  
  tasks:

    - name: Copy docker-repo to yum.repos.d
      become: true
      tags:
        - setup
      ansible.builtin.copy:
        src: docker-ce.repo
        dest: /etc/yum.repos.d
        remote_src: no

  ### install docker and cockpit to monitoring containers state
    - name: DNF Update
      become: true
      tags:
        - setup
      ansible.builtin.dnf:
        update_cache: yes

    - name: Add env for docker
      become: true
      tags:
        - pre
      shell: sed -i '/DOCKER_/{N;d;}' /etc/environment && echo -e "export DOCKER_TIMEOUT=200" >> /etc/environment && source /etc/environment
      
    - name: Check env for docker
      tags:
        - pre
      shell: echo "DOCKER_TIMEOUT" $DOCKER_TIMEOUT
  
    - name: Upgrade all packages
      become: true
      tags:
        - setup
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install Docker, Docker-Compose, Cockpit
      become: true
      tags:
        - setup
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - cockpit
        - cockpit-machines
        - cockpit-storaged
        - cockpit-pcp
        - docker-ce
        - docker-ce-cli
        - docker-compose-plugin
  
    - name: Copy cockpit-docker.tar.gz
      become: true
      tags:
        - setup
      copy:
        src: cockpit-docker.tar.gz
        dest: /usr/share/cockpit
        remote_src: no
        mode: 0644
        owner: root
        group: root
   
    - name: Unarchive cockpit-docker.tar.gz
      become: true
      tags:
        - setup
      unarchive:
        src: /usr/share/cockpit/cockpit-docker.tar.gz
        dest: /usr/share/cockpit/
        remote_src: yes

    - name: List installed packages
      tags:
        - setup
      shell: dnf list installed | grep -E "cockpit|cockpit-machines|cockpit-storaged|cockpit-pcp|docker-ce-cli|docker-ce|docker-compose-plugin"
      register: result
    - debug: var=result.stdout_lines
      tags:
        - setup

    - name: Enable & Start cockpit.socket
      become: true
      tags:
        - setup
      systemd:
        name: cockpit.socket
        state: started
        enabled: yes
    
    - name: Enable & Start pmlogger.service
      become: true
      tags:
        - setup
      systemd:
        name: pmlogger.service
        state: started
        enabled: yes
    
    - name: Enable & Start docker
      tags:
        - config
      become: true
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create dir to import Backups
      tags:
        - config
      ansible.builtin.file:
        path: "/home/{{ user }}/backups"
        state: directory
            
  # copy all backups to new machine
    - name: Copy Images Backup to New Host
      tags:
        - copy
      copy:
        src: "backups/images/{{ item }}"
        dest: "/home/{{ user }}/backups/"
      loop:
        - kibana.tar
        - elasticsearch.tar
        - nginx.tar
        - filebeat.tar
    
    - name: Copy Project Backup to New Host
      tags:
        - copy
      copy:
        src: "backups/{{ date }}/otus-proj.tgz"
        dest: "/home/{{ user }}/backups/"

  ### add user to group docker  
    - name: add user to docker group
      become: true
      tags:
         - configuration
      user:
        name: "{{ user }}"
        comment: "{{ user }}"
        groups: "{{ user }}, wheel, docker"
        append: yes

    - name: Reset connection to reapply groups to user
      meta: reset_connection

    - name: Reload docker with timout envs to import images
      become: true
      tags:
        - docker
      ansible.builtin.systemd_service:
        state: restarted
        daemon_reload: true
        name: docker        
    
    - name: envs check
      shell:  echo "DOCKER_TIMEOUT" $DOCKER_TIMEOUT
      register: result
    - debug: var=result.stdout_lines
      tags:
        - pre

  ### add backuped images
    # - name: Load all images from tarball
    #   tags:
    #     - docker
    #   docker_image:
    #     name: "{{ item.name }}"
    #     tag: "{{ item.tag }}"
    #     load_path: "/home/{{ user }}/backups/{{ item.path }}"
    #     state: present
    #     source: load
    #   loop:
    #     - { name: 'docker.elastic.co/kibana/kibana', tag: '8.12.1', path: 'kibana.tar' }
    #     - { name: 'docker.elastic.co/elasticsearch/elasticsearch', tag: '8.12.1', path: 'elasticsearch.tar' }
    #     - { name: 'docker.elastic.co/beats/filebeat', tag: '8.12.1', path: 'filebeat.tar' }
    #     - { name: 'nginx', tag: 'latest', path: 'nginx.tar' }
      
    - name: Load all image(s) from the given tar files
      tags:
        - docker
      community.docker.docker_image_load:
        path: "/home/{{ user }}/backups/{{ item }}"
      loop: 
        - kibana.tar
        - elasticsearch.tar
        - filebeat.tar
        - nginx.tar
      register: result
    
    - debug: var=result.stdout_lines
      tags:
        - pre
      
    - name: Create docker dir in home
      tags:
        - copy
      file:
        path: "/home/{{ user }}/docker/otus-proj"
        state: directory
  
    - name: Unarchive project to this directory
      tags:
        - copy
      unarchive:
        src: "/home/{{ user }}/backups/otus-proj.tgz"
        dest: "/home/{{ user }}/docker/otus-proj"
        remote_src: yes

  ### there is no need to use IPv6 in this project and this part used to run init.sh correct
    - name: Disable IPv6 with sysctl
      become: true
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: "1"
        state: "present"
        reload: "yes"
      tags:
        - config
      with_items:
      - net.ipv6.conf.all.disable_ipv6
      - net.ipv6.conf.default.disable_ipv6
      - net.ipv6.conf.lo.disable_ipv6

  ### change IP addresses in .env ###
    
    - name: Run init.sh to change MAIN_IP and DNS_IP in .env
      tags:
        - config
      shell: sh init.sh
      args:
        chdir: "/home/{{ user }}/docker/otus-proj"
  
    - name: Run app from docker-compose
      community.docker.docker_compose_v2:
        project_src: "/home/{{ user }}/docker/otus-proj/"
        files:
        - docker-compose.yml
        state: present
    
    - name: Check containers are up
      tags:
        - check
      shell: docker ps -a
      register: result
    - debug: var=result.stdout_lines
    
