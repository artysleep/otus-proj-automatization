- name: Config new machine
  hosts: otusproj
  vars:
    user: artys
    date: '2024-02-27' ### change this to right date of backup
  gather_facts: false
  
  tasks:
    - meta: refresh_inventory
      tags:
        - pre

    - name: Copy docker-repo to yum.repos.d
      #become: true
      tags:
        - pre
      ansible.builtin.copy:
        src: /home/{{ user }}/ansible/docker-ce.repo
        dest: /etc/yum.repos.d
        remote_src: no

  ### install docker and cockpit to monitoring containers state
    - name: DNF Update
      become: true
      tags:
        - setup
      ansible.builtin.dnf:
        update_cache: yes
  
    - name: Upgrade all packages
      become: true
      tags:
        - setup
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install Docker, Docker-Compose, Cockpit
      become: true
      tags:
        - setup
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - cockpit
        - cockpit-machines
        - cockpit-storaged
        - docker-ce
        - docker-ce-cli
        - docker-compose
  
    - name: Copy cockpit-docker.tar.gz
      become: true
      tags:
        - pre
      copy:
        src: cockpit-docker.tar.gz
        dest: /usr/share/cockpit
        remote_src: no
        mode: 0644
        owner: root
        group: root
   
    - name: Unarchive cockpit-docker.tar.gz
      become: true
      tags:
        - setup
      unarchive:
        src: /usr/share/cockpit/cockpit-docker.tar.gz
        dest: /usr/share/cockpit/
        remote_src: yes

    - name: Enable & Start cockpit.socket
      become: true
      tags:
        - setup
      systemd:
        name: cockpit.socket
        state: started
        enabled: yes

    - name: Enable & Start docker
      tags:
        - config
      become: true
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create dir to import Backups
      tags:
        - config
      ansible.builtin.file:
        path: "/home/{{ user }}/backups"
        state: directory
            
    - name: Put SELinux in permissive mode, logging actions that would be blocked
      become: true
      tags:
        - copy
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    # - name: Create and change rights of Log dir
    #   become: true
    #   tags:
    #     - copy
    #   ansible.builtin.file:
    #     path: /var/log/nf-app
    #     state: directory
    #     mode: '0777'
    #     owner: '{{ user }}'
    #     group: '{{ user }}'
    #     recurse: yes


  # copy all backups to new machine
    - name: Copy Images Backup to New Host
      tags:
        - copy
      copy:
        src: "backups/images/{{ item }}"
        dest: "/home/{{ user }}/backups/"
      loop:
        - kibana.tar
        - elasticsearch.tar
        - nginx.tar
        - filebeat.tar
    
    - name: Copy Project Backup to New Host
      tags:
        - copy
      copy:
        src: "backups/{{ date }}/otus-proj.tgz"
        dest: "/home/{{ user }}/backups/"

  ### add user to group docker  
    - name: add user to docker group
      become: true
      tags:
         - configuration
      user:
        name: "{{ user }}"
        comment: "{{ user }}"
        groups: "{{ user }}, wheel, docker"
        append: yes

    - name: Reset connection to reapply groups to user
      meta: reset_connection

    - name: Reload docker with timout envs to import images
      become: true
      tags:
        - docker
      ansible.builtin.systemd_service:
        state: restarted
        daemon_reload: true
        name: docker
      environment:
        COMPOSE_HTTP_TIMEOUT: 120
        DOCKER_CLIENT_TIMEOUT: 120

  ### add backuped images
    - name: Load all images from tarball
      tags:
        - docker
      docker_image:
        name: "{{ item.name }}"
        tag: "{{ item.tag }}"
        load_path: "/home/{{ user }}/backups/{{ item.path }}"
        state: present
        source: load
      loop:
        - { name: 'docker.elastic.co/elasticsearch/elasticsearch', tag: '8.12.1', path: 'elasticsearch.tar' }
        - { name: 'docker.elastic.co/kibana/kibana', tag: '8.12.1', path: 'kibana.tar' }
        - { name: 'docker.elastic.co/beats/filebeat', tag: '8.12.1', path: 'filebeat.tar' }
        - { name: 'nginx', tag: 'latest', path: 'nginx.tar' }
      
  
    - name: Create docker dir in home
      tags:
        - copy
      file:
        path: "/home/{{ user }}/docker/otus-proj"
        state: directory
  
    - name: Unarchive project to this directory
      tags:
        - copy
      unarchive:
        src: "/home/{{ user }}/backups/otus-proj.tgz"
        dest: "/home/{{ user }}/docker/otus-proj"
        remote_src: yes

  ### there is no need to use IPv6 in this project and this part used to run init.sh correct
    - name: Disable IPv6 with sysctl
      become: true
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: "1"
        state: "present"
        reload: "yes"
      tags:
        - config
      with_items:
      - net.ipv6.conf.all.disable_ipv6
      - net.ipv6.conf.default.disable_ipv6
      - net.ipv6.conf.lo.disable_ipv6

  ### change IP addresses in .env ###
    
    - name: Run init.sh to change MAIN_IP and DNS_IP in .env
      tags:
        - config
      shell: sh init.sh
      args:
        chdir: "/home/{{ user }}/docker/otus-proj"
  
  ### copy service unit to be able operate with app from systemctl
      
    # - name: Copy nf-app.service to /etc/systemd/system/
    #   become: true
    #   tags: 
    #     - config
    #   copy: 
    #     src: "/home/{{ user }}/docker/otus-proj/config/nf-app.service"
    #     dest: /etc/systemd/system/
    #     remote_src: yes

  ### add nf-app to autorun and start it
    
    # - name: Enable & Start nf-app
    #   become: true
    #   tags:
    #     - start
    #   systemd:
    #     name: nf-app
    #     state: started
    #     enabled: yes

    - name: Run app from docker-compose
      community.docker.docker_compose_v2:
        project_src: "/home/{{ user }}/docker/otus-proj/"
        files:
        - docker-compose.yml
        state: present
    
    - name: Check containers are up
      tags:
        - check
      shell: docker ps -a
      register: result
    
    # - name: Try to see 'docker ps -a'
    #   tags:
    #     - check
    #   debug: var=result.stdout_lines

    # - name: Check service status in systemctl
    #   become: true
    #   tags:
    #     - check
    #   shell: systemctl status nf-app
    #   register: result
    
    # - name: Try to see 'systemctl status nf-app'
    #   tags:
    #     - check
    #   debug: var=result.stdout_lines

