### BACKUP PROJECT PLAYBOOK ###

- name: Create Backup of current state of project
  hosts: otusproj
  vars:
    user: artys
  gather_facts: yes
  tasks:
    - name: Display the current timestamp in YYYY-MM-DD
      debug:
        var=ansible_date_time.date

    - name: Create Ansible dir for backups
      ansible.builtin.file:
        path: backups/{{ ansible_date_time.date }}
        state: directory
      delegate_to: localhost

    - name: Stop app from docker-compose
      community.docker.docker_compose_v2:
        project_src: "/home/{{ user }}/docker/otus-proj/"
        files:
        - docker-compose.yml
        state: absent
      register: result
    
    - name: Debug registered var
      tags:
        - check
      debug: var=result.stdout_lines

  ### create dir for backups on local machine
    - name: Create Backup dir
      tags:
        - archive
      ansible.builtin.file:
        path: "/home/{{ user }}/backups/{{ ansible_date_time.date }}/"
        state: directory
        recurse: yes
    - name: Create Backup dir
      tags:
        - test
      ansible.builtin.file:
        path: "/home/{{ user }}/backups/images/"
        state: directory
        recurse: yes
  
  ### create backups of proj and images
    - name: Create Backup of current Project state
      community.general.archive:
         path: "/home/{{ user }}/docker/otus-proj/."
         dest: "/home/{{ user }}/backups/{{ ansible_date_time.date }}/otus-proj.tgz"

    - name: Reload docker with timout envs to import images
      become: true
      tags:
        - docker
      ansible.builtin.systemd_service:
        state: restarted
        daemon_reload: true
        name: docker
      
    - name: Archive all images as a tarball
      tags:
        - archive
      docker_image:
        name: "{{ item.name }}"
        tag: "{{ item.tag }}"
        archive_path: "/home/{{ user }}/backups/images/{{ item.path }}"
        source: local
      loop:
        - { name: 'docker.elastic.co/elasticsearch/elasticsearch', tag: '8.12.1', path: 'elasticsearch.tar' }
        - { name: 'docker.elastic.co/kibana/kibana', tag: '8.12.1', path: 'kibana.tar' }
        - { name: 'docker.elastic.co/beats/filebeat', tag: '8.12.1', path: 'filebeat.tar' }
        - { name: 'nginx', tag: 'latest', path: 'nginx.tar' }

    - name: Export all project images
      tags:
        - test
      community.docker.docker_image_export:
        names:
          - docker.elastic.co/elasticsearch/elasticsearch:8.12.1
          - docker.elastic.co/kibana/kibana:8.12.1
          - docker.elastic.co/beats/filebeat:8.12.1
          - nginx:latest
        path: "/home/{{ user }}/backups/images/otus_images.tar"
      
    - name: Check backups are created in systemctl
      become: true
      tags:
        - check
      shell: ls -lah /home/{{ user }}/backups/{{ ansible_date_time.date }}/
      register: result

    - name: Debug registered var
      tags:
        - check
      debug: var=result.stdout_lines

  ### copy backups to Ansible host
    - name: Copy all images to this host
      tags:
        - copy
      fetch:
        src: "/home/{{ user }}/backups/images/{{ item }}"
   ### if want to put in "date" dir
        dest: backups/images/
        flat: yes
   #    dest: backups/
      loop: 
        - kibana.tar
        - elasticsearch.tar
        - nginx.tar
        - filebeat.tar

    - name: Copy project to this host
      tags:
        - copy
      fetch:
        src: "/home/{{ user }}/backups/{{ ansible_date_time.date }}/otus-proj.tgz"
   ### if want to put in "date" dir
        dest: backups/{{ ansible_date_time.date }}/
        flat: yes  
      
    - name: Run app from docker-compose
      community.docker.docker_compose_v2:
        project_src: "/home/{{ user }}/docker/otus-proj/"
        files:
        - docker-compose.yml
        state: present
      register: result
    
    - name: Debug registered var
      tags:
        - check
      debug: var=result.stdout_lines
    
    - name: Check containers are up
      tags:
        - check
      shell: docker ps -a
      register: result
    
    - name: Debug registered var
      tags:
        - check
      debug: var=result.stdout_lines